diff --git a/assets/scripts/Settings.js b/assets/scripts/Settings.js
index fdf0e48..4d48388 100644
--- a/assets/scripts/Settings.js
+++ b/assets/scripts/Settings.js
@@ -18,9 +18,9 @@ with (JavaPackages) {
 
 	var goalDistance = 85.0;
 
-	var debug1 = 0.2;
-	var debug2 = 1.0;
-	var debug3 = 0.2;
+	var debug1 = 0.05;
+	var debug2 = 1.5;
+	var debug3 = 1.0;
 	var debug4 = 0.3;
 	var debug5 = 0.0;
 
diff --git a/src/Networking/PacketWorldState.java b/src/Networking/PacketWorldState.java
index 6cde096..705ae8f 100644
--- a/src/Networking/PacketWorldState.java
+++ b/src/Networking/PacketWorldState.java
@@ -20,6 +20,7 @@ public class PacketWorldState extends Packet {
     // read variables
     private short tick;
     private boolean puckFrozen;
+    private boolean puckDunked;
     private Vector3 puckPosition;
     private javax.vecmath.Quat4f puckOrientation = new javax.vecmath.Quat4f();
     private javax.vecmath.Vector3f puckLinearVelocity = new javax.vecmath.Vector3f();
@@ -46,7 +47,11 @@ public class PacketWorldState extends Packet {
         buffer.putShort(TimeManager.getTick());
 
         // puck frozen
-        buffer.put(puck.isFrozen() ? (byte)1 : (byte)2);
+        if (puck.isFrozen()) {
+            buffer.put(puck.wasDunked() ? (byte) 2 : (byte) 1);
+        } else {
+            buffer.put((byte)0);
+        }
 
         // position
         buffer.putShort(NetworkFloat.encode(puckPosition.x()));
@@ -96,7 +101,9 @@ public class PacketWorldState extends Packet {
     public void readInfo(ByteBuffer buffer) {
         tick = buffer.getShort();
 
-        puckFrozen = (buffer.get() == 1);
+        byte puckState = buffer.get();
+        puckFrozen = (puckState > 0);
+        puckDunked = (puckState == 2);
 
         puckPosition = Vector3f.createFrom(
                 NetworkFloat.decode(buffer.getShort()),
@@ -162,7 +169,7 @@ public class PacketWorldState extends Packet {
 
         // set frozen
         if (!puck.isFrozen() && puckFrozen) {
-            puck.reset();
+            puck.reset(puckDunked);
         } else if (puck.isFrozen() && !puckFrozen) {
             puck.unfreeze();
         }
diff --git a/src/a2/GameEntities/GoalText.java b/src/a2/GameEntities/GoalText.java
new file mode 100644
index 0000000..bec0a61
--- /dev/null
+++ b/src/a2/GameEntities/GoalText.java
@@ -0,0 +1,107 @@
+package a2.GameEntities;
+
+import myGameEngine.GameEntities.Billboard;
+import myGameEngine.GameEntities.GameEntity;
+import myGameEngine.Helpers.Duration;
+import myGameEngine.Singletons.EngineManager;
+import myGameEngine.Singletons.Settings;
+import myGameEngine.Singletons.TimeManager;
+import myGameEngine.Singletons.UniqueCounter;
+import ray.rage.scene.Light;
+import ray.rage.scene.SceneManager;
+import ray.rage.scene.SceneNode;
+
+import java.awt.*;
+import java.io.IOException;
+
+public class GoalText extends GameEntity {
+    private Duration duration = new Duration(5000f);
+    private Light light;
+    private Billboard[] letters;
+    private SceneNode[] nodes;
+    private boolean dunk;
+    private float cr;
+    private float cg;
+    private float cb;
+
+    public GoalText(Player.Team team, boolean dunk) {
+        super(true);
+        this.dunk = dunk;
+        SceneManager sm = EngineManager.getSceneManager();
+
+        if (team == Player.Team.Orange) {
+            cr = 1.0f;
+            cg = 0.9f;
+            cb = 0.6f;
+        } else {
+            cr = 0.6f;
+            cg = 0.6f;
+            cb = 1.0f;
+        }
+
+        node = sm.getRootSceneNode().createChildSceneNode("GoalTextNode" + UniqueCounter.next());
+        float goalDistance = Settings.get().goalDistance.floatValue();
+        goalDistance = goalDistance * ((team == Player.Team.Orange) ? 1 : -1);
+        node.setLocalPosition(goalDistance, 2.5f, 0f);
+
+        String text = dunk ? "dunk" : "goal";
+
+        letters = new Billboard[4];
+        nodes = new SceneNode[4];
+        try {
+            for (int i = 0; i < nodes.length; i++) {
+                int k = (team == Player.Team.Orange) ? i : nodes.length - i - 1;
+                nodes[i] = node.createChildSceneNode("GoalTextSubNode" + UniqueCounter.next());
+                letters[i] = new Billboard(nodes[i], 3f, 3f, text.charAt(k) + ".png", Color.WHITE);
+                addResponsibility(letters[i]);
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+
+        light = sm.createLight(node.getName() + "Light" + UniqueCounter.next(), Light.Type.POINT);
+        addResponsibility(light);
+        light.setAmbient(Color.black);
+        light.setConstantAttenuation(0);
+        light.setQuadraticAttenuation(0);
+        light.setLinearAttenuation(0.1f);
+        light.setRange(60f);
+        node.attachObject(light);
+    }
+
+    public void update(float delta) {
+        if (duration.exceeded(delta)) {
+            this.destroy();
+            return;
+        }
+
+        float scalar = 1f - (float)Math.pow(duration.progress(), 2f);
+
+        for (int i = 0; i < letters.length; i++) {
+            float theta = TimeManager.getTick() * 0.05f;
+            float y = (float)Math.sin(theta + i * 1f * scalar) * 1.5f * scalar;
+            nodes[i].setLocalPosition(0f, y, (i - 1.5f) * 3f);
+            nodes[i].setLocalScale(scalar, scalar, scalar);
+            Color color;
+            Color lightColor;
+            if (dunk) {
+                float r = 0.5f + (float)Math.sin(theta * 2f + i * 1f * scalar) * 0.5f * scalar;
+                float b = 0.5f + (float)Math.cos(theta * 2f + i * 1f * scalar) * 0.5f * scalar;
+                if (r > 0.5) { r = 1f; }
+                if (b > 0.5) { b = 1f; }
+                color = new Color(r, 0, b);
+                lightColor = color;
+            } else {
+                float v = 0.9f + (float)Math.sin(theta * 2 + i) * 0.1f;
+                color = new Color(cr * v, cg * v, cb * v);
+                lightColor = new Color((float)Math.pow(cr, 3) * (float)Math.pow(v, 4), (float)Math.pow(cg, 3) * (float)Math.pow(v, 4), (float)Math.pow(cb, 3) * (float)Math.pow(v, 4));
+            }
+            letters[i].getMaterial().setAmbient(color);
+            if (i == 0) {
+                light.setDiffuse(lightColor);
+                light.setSpecular(lightColor);
+                light.setRange(60f * (float)Math.pow(scalar, 2));
+            }
+        }
+    }
+}
diff --git a/src/a2/GameEntities/Puck.java b/src/a2/GameEntities/Puck.java
index e580518..8273572 100644
--- a/src/a2/GameEntities/Puck.java
+++ b/src/a2/GameEntities/Puck.java
@@ -9,6 +9,7 @@ import com.bulletphysics.collision.shapes.ConvexHullShape;
 import com.bulletphysics.dynamics.RigidBody;
 import com.bulletphysics.linearmath.Transform;
 import myGameEngine.Controllers.MotionStateController;
+import myGameEngine.GameEntities.Billboard;
 import myGameEngine.GameEntities.GameEntity;
 import myGameEngine.GameEntities.LightFade;
 import myGameEngine.GameEntities.Particle;
@@ -32,6 +33,7 @@ public class Puck extends GameEntity implements Attackable {
     private boolean dunk = false;
     private CollisionBox dunkBox1;
     private  CollisionBox dunkBox2;
+    private boolean dunked = false;
 
     private float angularPushScale = 400f;
     private float linearPushScale = 200f;
@@ -80,11 +82,13 @@ public class Puck extends GameEntity implements Attackable {
     @Override
     public boolean shouldRegisterCollision() { return true; }
 
-    public void reset() {
+    public void reset(boolean dunk) {
+        dunked = dunk;
         try{
             Player.Team team = (node.getWorldPosition().x() < 0) ? Player.Team.Blue : Player.Team.Orange;
             Color powColor = (team == Player.Team.Blue) ? new Color(255, 230, 170) : new Color(170, 170, 255);
             Particle pow = new Particle(10f, 10f, node.getWorldPosition(), Vector3f.createZeroVector(), "pow2.png", powColor, 300f);
+            new GoalText(team, dunk);
             new LightFade(pow.getNode(), powColor, 100f, 0.01f, 300f);
             for(int i =0; i<8;i++){
                 particles[i].startPhysics();
@@ -137,7 +141,7 @@ public class Puck extends GameEntity implements Attackable {
             GameState.addScore(team, 1);
         }
 
-        reset();
+        reset(dunk);
     }
 
     public void playerCollision(GameEntity entity, ManifoldPoint contactPoint, boolean isA) {
@@ -235,6 +239,7 @@ public class Puck extends GameEntity implements Attackable {
     }
 
     public void collision(GameEntity entity, ManifoldPoint contactPoint, boolean isA) {
+        if (isFrozen()) { return; }
         if (entity instanceof Goal && !UDPClient.hasClient()) {
             goalCollision((node.getWorldPosition().x() < 0) ? Player.Team.Blue : Player.Team.Orange);
         } else if (entity instanceof Player) {
@@ -266,6 +271,7 @@ public class Puck extends GameEntity implements Attackable {
     public SceneNode getNode() { return node; }
     public RigidBody getBody() { return body; }
     public boolean isFrozen() { return freezeTime > 0; }
+    public boolean wasDunked() { return dunked; }
 
     @Override
     public void update(float delta) {
diff --git a/src/a2/MyGame.java b/src/a2/MyGame.java
index a5c300b..7a69fdf 100644
--- a/src/a2/MyGame.java
+++ b/src/a2/MyGame.java
@@ -78,7 +78,7 @@ public class MyGame extends VariableFrameRateGame {
         player = new Player((byte)0, true, Player.Team.Orange);
         new Player((byte)1, false, Player.Team.Orange);
         new Player((byte)2, false, Player.Team.Blue);
-        new AIPlayer((byte)200,false,Player.Team.Orange);
+        //new AIPlayer((byte)200,false,Player.Team.Orange);
     }
 
     @Override
